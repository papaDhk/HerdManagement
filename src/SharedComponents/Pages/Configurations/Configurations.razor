@page "/configurations"
@using HerdManagement.Domain.Common.Entities
@using HerdManagement.Domain.Common.Repositories
@using HerdManagement.Domain.Feeding.Entities
@using HerdManagement.Domain.Feeding.Repository
@using SharedComponents.Utils
@using Applicattion.Data.DTO.MeasurementUnit
@using Applicattion.Data.DTO.MeasurementUnit.Assembler
@using Applicattion.Data.DTO.Feeding
@using Applicattion.Data.DTO.Feeding.Assembler

@inject IMeasurementUnitRepository MeasurementUnitRepository
@inject IFoodRepository FoodRepository
@inject NavigationManager NavigationManager

<nav class="navbar navbar-light mb-3 horizontal-nav-bar">
    <h6>Configurations</h6>
</nav>

@if (_measurementUnitDtOs == null)
{
    <img src="images/dog-alone.gif" class="rounded mx-auto d-block img-fluid"/>
}
else
{
    <nav>
        <div class="nav nav-tabs nav-fill" id="nav-tab" role="tablist">
            <a class="nav-item nav-link active" id="nav-profile-tab" data-toggle="tab" href="#nav-measure-units" role="tab" aria-controls="nav-measure-units" aria-selected="true">Unite de mesures</a>
            <a class="nav-item nav-link" id="nav-alimentation-tab" data-toggle="tab" href="#nav-alimentation" role="tab" aria-controls="nav-alimentation" aria-selected="false">Alimentation</a>
            <a class="nav-item nav-link" id="nav-characteristic-tab" data-toggle="tab" href="#nav-characteristic" role="tab" aria-controls="nav-characteristic" aria-selected="false">Caracteristiques</a>
        </div>
    </nav>
    <div class="tab-content mt-5" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-measure-units" role="tabpanel" aria-labelledby="nav-measure-units-tab">
            <div class="control-section">
                <div class="row">
                    <div>
                            <SfGrid @ref="_measurementUnitDataGrid" DataSource="@_measurementUnitDtOs" AllowSorting="true" Toolbar="@_toolbarItems">
                                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog">
                                    <HeaderTemplate>
                                        @{
                                            <span>Enregistrer une unité de mesure</span>
                                        }
                                    </HeaderTemplate>
                                </GridEditSettings>
                                <GridEvents OnActionBegin="OnBeginHandlerAsync" CommandClicked="OnDetailButtonClicked" TValue="MeasurementUnitDTO"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(MeasurementUnitDTO.Id) IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
                                    <GridColumn Field=@nameof(MeasurementUnitDTO.Label)>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(MeasurementUnitDTO.Symbol) HeaderText="Symbole">
                                    </GridColumn>
                                    <GridColumn Field=@nameof(MeasurementUnitDTO.MeasurementUnitCategory) HeaderText="Catégorie">
                                        <Template Context="MeasurementUnitContext">
                                            @{
                                                var measurementUnit = (MeasurementUnitDTO) MeasurementUnitContext;
                                            }
                                            <span>@Helper.GetDisplayName(measurementUnit.MeasurementUnitCategory)</span>
                                        </Template>
                                        <EditTemplate Context="MeasurementUnitContext">
                                            Catégorie de mesure
                                            @*
                                            Id value should be based on Field name
                                            *@
                                            <SfDropDownList ID="MeasurementUnit___Category"
                                                            TItem="string"
                                                            TValue="MeasurementUnitCategory"
                                                            @bind-Value="@((MeasurementUnitContext as MeasurementUnitDTO).MeasurementUnitCategory)"
                                                            DataSource="@Helper.GetKeyValuesFromEnum(typeof(MeasurementUnitCategory)).Keys">
                                                <DropDownListTemplates TItem="string">
                                                    <ItemTemplate Context="MeasurementUnitCategoryContext">
                                                        <span>@(Helper.GetKeyValuesFromEnum(typeof(MeasurementUnitCategory))[(MeasurementUnitCategoryContext as string)])</span>
                                                    </ItemTemplate>
                                                </DropDownListTemplates>
                                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </EditTemplate>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(MeasurementUnitDTO.Commentary) HeaderText="Commentaire">
                                    </GridColumn>
                                    <GridColumn HeaderText="Actions">
                                        <GridCommandColumns>
                                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-update", CssClass = "e-flat"})"></GridCommandColumn>
                                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-cancel-icon", CssClass = "e-flat"})"></GridCommandColumn>
                                        </GridCommandColumns>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                    </div>
                </div>
            </div>

        </div>
        
        <div class="tab-pane fade show" id="nav-alimentation" role="tabpanel" aria-labelledby="nav-alimentation-tab">
            <div class="control-section">
                <div class="row">
                    <div>
                        <SfGrid @ref="_foodDataGrid" DataSource="@_foodDtOs" AllowSorting="true" Toolbar="@_foodDataGridToolbarItems">
                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog">
                                <HeaderTemplate>
                                    @{
                                        <span>Enregistrer un aliment</span>
                                    }
                                </HeaderTemplate>
                            </GridEditSettings>
                            <GridEvents OnActionBegin="OnFoodBeginHandlerAsync" CommandClicked="OnFoodDetailButtonClicked" TValue="FoodDTO"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(FoodDTO.Id) IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
                                <GridColumn Field=@nameof(FoodDTO.Label)>
                                </GridColumn>
                                <GridColumn Field=@nameof(MeasurementUnitDTO.MeasurementUnitCategory) HeaderText="Catégorie">
                                    <Template Context="currentFoodRow">
                                        @{
                                            var foodDto = (FoodDTO) currentFoodRow;
                                        }
                                        <span>@Helper.GetDisplayName(foodDto.MeasurementUnitCategory)</span>
                                    </Template>
                                    <EditTemplate Context="MeasurementUnitContext">
                                        Catégorie de mesure
                                        @*ID value should be based on Field name*@
                                        <SfDropDownList ID="MeasurementUnit___Category"
                                                        TItem="string"
                                                        TValue="MeasurementUnitCategory"
                                                        @bind-Value="@((MeasurementUnitContext as FoodDTO).MeasurementUnitCategory)"
                                                        DataSource="@Helper.GetKeyValuesFromEnum(typeof(MeasurementUnitCategory)).Keys">
                                            <DropDownListTemplates TItem="string" >
                                                <ItemTemplate Context="MeasurementUnitCategoryContext">
                                                    <span>@(Helper.GetKeyValuesFromEnum(typeof(MeasurementUnitCategory))[(MeasurementUnitCategoryContext as string)])</span>
                                                </ItemTemplate>
                                            </DropDownListTemplates>
                                            <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </EditTemplate>
                                </GridColumn>
                                <GridColumn Field=@nameof(FoodDTO.Description) HeaderText="Description">
                                </GridColumn>
                                <GridColumn HeaderText="Actions">
                                    <GridCommandColumns>
                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                                        <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-update", CssClass = "e-flat"})"></GridCommandColumn>
                                        <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss = "e-icons e-cancel-icon", CssClass = "e-flat"})"></GridCommandColumn>
                                    </GridCommandColumns>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>

        <TabComingSoon idTab="nav-characteristic" />

        <div class="tab-pane fade" id="nav-weightings" role="tabpanel" aria-labelledby="nav-weightings-tab"></div>
    </div>
    
    
}


@code {
    private List<MeasurementUnitDTO> _measurementUnitDtOs;

    private SfGrid<MeasurementUnitDTO> _measurementUnitDataGrid;

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<MeasurementUnit> measurementUnits = await MeasurementUnitRepository.GetAllMeasurementUnits();
        _measurementUnitDtOs = measurementUnits.ToMeasurementUnitDTOList().ToList();
        
        IEnumerable<Food> foods = await FoodRepository.GetAllFoods();
        _foodDtOs = foods.ToFoodDTOList().ToList();
    }

    private readonly string[] _toolbarItems = {"Add"};

    private async Task OnBeginHandlerAsync(ActionEventArgs<MeasurementUnitDTO> Args)
    {
        if (Args.Action == "Add")
        {
            MeasurementUnitDTO newMeasurementUnitDto = Args.Data;
            Args.Data = await MeasurementUnitRepository.CreateMeasurementUnit(newMeasurementUnitDto.ToMeasurementUnit())
                .ContinueWith(r => r.Result.ToMeasurementUnitDTO());
        }
        else if (Args.Action == "Edit")
        {
            MeasurementUnitDTO newMeasurementUnitDto = Args.Data;
            int result = await MeasurementUnitRepository.UpdateMeasurementUnit(newMeasurementUnitDto.ToMeasurementUnit());
        }
    }

    private void OnDetailButtonClicked(CommandClickEventArgs<MeasurementUnitDTO> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Details")
        {
            NavigationManager.NavigateTo($"measurementUnits/{args.RowData.Id}");
        }
    }

    
    
    
    private List<FoodDTO> _foodDtOs;

    private SfGrid<FoodDTO> _foodDataGrid;

    private readonly string[] _foodDataGridToolbarItems = {"Add"};

    private async Task OnFoodBeginHandlerAsync(ActionEventArgs<FoodDTO> Args)
    {
        if (Args.Action == "Add")
        {
            FoodDTO newFoodDto = Args.Data;
            Args.Data = await FoodRepository.CreateFood(newFoodDto.ToFood())
                .ContinueWith(r => r.Result.ToFoodDTO());
        }
        else if (Args.Action == "Edit")
        {
            FoodDTO newFoodDTO = Args.Data;
            int result = await FoodRepository.UpdateFood(newFoodDTO.ToFood());
        }
    }

    private void OnFoodDetailButtonClicked(CommandClickEventArgs<FoodDTO> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Details")
        {
            NavigationManager.NavigateTo($"foods/{args.RowData.Id}");
        }
    }
}