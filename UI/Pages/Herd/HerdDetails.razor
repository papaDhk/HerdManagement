@page "/herds/{herdId:int}/{herdName}"
@using Syncfusion.Blazor.Notifications

@inject ISpecieRepository specieRepository
@inject IBreedRepository breedRepository
@inject IAnimalRepository animalRepository
@inject IHerdRepository herdRepository
@inject IReproductionService reproductionService
@inject NavigationManager navigationManager
@inject BootstrapService bootstrapService


<nav class="navbar navbar-light mb-3 horizontal-nav-bar justify-content-between">
    <h6>Troupeaux / @herdName</h6>
    <span class="oi oi-plus" aria-hidden="true" data-toggle="modal" data-target="#animalModalForm"></span>
</nav>

@if (breedDTOs == null)
{
    <img src="images/dog-alone.gif" class="rounded mx-auto d-block img-fluid"  alt="walkin dog"/>
}
else
{
    <AnimalGrid @ref=@animalGrid AnimalList="@animals" HerdName="@currentHerd.Name"></AnimalGrid>
    
    <div class="modal fade" id="animalModalForm" tabindex="-1" role="dialog" aria-labelledby="Enregistrer un nouveau membre" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="animalModalFormLabel">Enregistrer un nouveau membre</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="ClearModalForm">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="@animalDTO" OnValidSubmit="SaveAnimalAsync">
                    <div class="modal-body">

                        <DataAnnotationsValidator />
                        <div class="form-group row">
                            <label for="name" class="col-3 col-form-label">
                                Nom
                            </label>
                            <div class="col-sm-9">
                                <InputText id="name" class="form-control" placeholder="Nom de l'animal" @bind-Value="animalDTO.Name" />
                                <ValidationMessage For="@(() => animalDTO.Name)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="breed" class="col-3 col-form-label">
                                Race
                            </label>
                            <div class="col-9">
                                <InputSelect id="breed" @bind-Value="animalDTO.BreedId" class="form-control">
                                    @foreach (var breed in breedDTOs)
                                        {
                                        <option value="@breed.Id">@breed.Label</option>
                                        }
                                </InputSelect>
                                <ValidationMessage For="@(() => animalDTO.BreedId)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="number" class="col-3 col-form-label">
                                Numero
                            </label>
                            <div class="col-sm-9">
                                <InputNumber id="number" class="form-control" placeholder="numero de l'animal" @bind-Value="animalDTO.Number" />
                                <ValidationMessage For="@(() => animalDTO.Number)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="sex" class="col-3 col-form-label">
                                Sexe
                            </label>
                            <div class="col-9">
                                <InputSelect id="sex" @bind-Value="animalDTO.Sex" class="form-control">
                                    @foreach (var sex in Helper.GetKeyValuesAsListFromEnum(typeof(SexEnum)))
                                        {
                                        <option value="@sex.Key">@sex.Value</option>
                                        }
                                </InputSelect>
                                <ValidationMessage For="@(() => animalDTO.Sex)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="birthDate" class="col-3 col-form-label">
                                Date de naissance
                            </label>
                            <div class="col-sm-9">
                                <InputDate id="birthDate" class="form-control" placeholder="Date de naissance" @bind-Value="animalDTO.BirthDate" />
                                <ValidationMessage For="@(() => animalDTO.BirthDate)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="origin" class="col-3 col-form-label">
                                Origines
                            </label>
                            <div class="col-9">
                                <InputSelect id="origin" @bind-Value="@newAnimalOrigin" class="form-control">

                                    @foreach (var origin in Helper.GetKeyValuesAsListFromEnum(typeof(AnimalOrigin)))
                                        {
                                        <option value="@origin.Key">@origin.Value</option>
                                        }
                                </InputSelect>
                                <ValidationMessage For="@(() => animalDTO.Origin)" />
                            </div>
                        </div>

                        @if (newAnimalOrigin == AnimalOrigin.BornInFarm.ToString())
                        {
                            <div class="form-group row">
                                <label for="mother" class="col-3 col-form-label">
                                    Mere
                                </label>
                                <div class="col-9">
                                    <InputSelect id="mother" @bind-Value="@animalDTO.MotherId" class="form-control" placeholder="Quelles sont les origines">

                                        @foreach (var female in females)
                                                {
                                            <option value="@female.Id">@female.ToString()</option>
                                                }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => animalDTO.MotherId)" />
                                    @if (@canNotBeMother)
                                    {
                                        <div class="validation-message">L'animal sélectionné ne peut pas être la mère de "@animalDTO.Name"</div>
                                    }
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="father" class="col-3 col-form-label">
                                    Pere
                                </label>
                                <div class="col-9">
                                    <InputSelect id="father" @bind-Value="@animalDTO.FatherId" class="form-control">
                                        @foreach (var male in males)
                                                {
                                            <option value="@male.Id">@male.ToString()</option>
                                                }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => animalDTO.FatherId)" />
                                    @if (@canNotBeFather)
                                    {
                                        <div class="validation-message">L'animal selectionné ne peut pas être le père de "@animalDTO.Name"</div>
                                    }

                                </div>
                            </div>
                        }

                        <div class="form-group row">
                            <label for="picture" class="col-3 col-form-label">
                                Photo
                            </label>
                            <div id="picture" class="col-sm-9">
                                <SfUploader>
                                    <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                                </SfUploader>
                            </div>
                        </div>
                    </div>


                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="ClearModalForm">Close</button>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <SfToast @ref="_toast" ID="toast_type" Timeout="2000" ShowCloseButton="true" ShowProgressBar="true">
        <ToastPosition X="Center" Y="bottom"></ToastPosition>
    </SfToast>
}


@code {
    [Parameter]
    public int herdId { get; set; }

    [Parameter]
    public string herdName { get; set; }

    private HerdDTO currentHerd;

    AnimalGrid animalGrid;

    private List<Male> males;

    private List<Female> females;

    private List<YoungAnimal> youngAnimals;

    private List<Animal> animals;

    private List<BreedDTO> breedDTOs;
    
    private AnimalDTO animalDTO = new AnimalDTO { BirthDate = DateTime.UtcNow };

    public string[] ToolbarItems = new string[] { "Search" };

    private string newAnimalOrigin = "";

    private bool canNotBeFather;

    private bool canNotBeMother;
    
    private SfToast _toast;
    
    ToastModel _successToast = new ToastModel() {Title = "Succés!", Content = "Aniaml créé avec succés.", CssClass = "e-toast-success", Icon = "e-success toast-icons"};
    
    protected override async Task OnInitializedAsync()
    {
        currentHerd = await herdRepository.GetHerdById(herdId).ContinueWith(herd => herd.Result.ToHerdDTO());
        animalDTO.Herd = currentHerd;

        males = animalRepository.GetMalesByHerdId(herdId).ToList();

        females = animalRepository.GetFemalesByHerdId(herdId).ToList();

        youngAnimals = animalRepository.GetYoungAnimalsByHerdId(herdId).ToList();

        animals = males.Cast<Animal>().ToList();

        animals.AddRange(females.Cast<Animal>());

        animals.AddRange(youngAnimals.Cast<Animal>());

        breedDTOs = await breedRepository.GetBreedsBySpecie(currentHerd.Specie.Id).ContinueWith(breeds => breeds.Result.ToBreedDTOList().ToList());
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                300, 300);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            animalDTO.Picture = buffer;
        }
    }

    private void ClearModalForm()
    {
        animalDTO = new AnimalDTO { Herd = currentHerd, BirthDate = DateTime.UtcNow };
    }

    private async Task SaveAnimalAsync()
    {
        canNotBeMother = animalDTO.MotherId > 0 && !reproductionService.CanBeMotherOfAnimalBornIn(animalDTO.MotherId, animalDTO.BirthDate);

        canNotBeFather = animalDTO.FatherId > 0 && !reproductionService.CanBeFatherOfAnimalBornIn(animalDTO.FatherId, animalDTO.BirthDate);

        if (canNotBeFather || canNotBeMother)
        {
            return;
        }

        animalDTO.Origin = (AnimalOrigin)Enum.Parse(typeof(AnimalOrigin), newAnimalOrigin);

        var newAnimal = await reproductionService.AddNewAnimalAsync(animalDTO);

        animals.Add(newAnimal);

        animalGrid.Refresh();

        await bootstrapService.HideModal("#animalModalForm");

        ClearModalForm();

        _toast.ShowCloseButton = true;

        await _toast.Show(_successToast);

    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            animalDTO.Picture = file.Stream.ToArray();
        }
    }

    private void CanBeFather(ChangedEventArgs changedEventArgs)
    {
        int selectedFatherId = int.Parse(changedEventArgs.Value);
        canNotBeFather = !reproductionService.CanBeFatherOfAnimalBornIn(selectedFatherId, animalDTO.BirthDate);
    }

    private void CanBeMother(ChangedEventArgs changedEventArgs)
    {
        int selectedMotherId = int.Parse(changedEventArgs.Value);
        canNotBeMother = !reproductionService.CanBeMotherOfAnimalBornIn(selectedMotherId, animalDTO.BirthDate);
    }

}
