@page "/herds/{AnimalHerdName}/animals/male/{animalNumber:int}/{animalName}"
@using HerdManagement.Infrastructure.Persistence.Repository
@using HerdManagement.Domain.SpecieBreed.Entities
@using HerdManagement.Domain.Reproduction.Entities
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using HerdManagement.Domain.SpecieBreed.Repository

@inject ISpecieRepository specieRepository
@inject NavigationManager navigationManager
@inject IAnimalRepository animalRepository
@inject IBreedRepository breedRepository
@inject IReproductionService reproductionService


<nav class="navbar navbar-light mb-3 horizontal-nav-bar justify-content-between">
    <h6>Troupeaux / @AnimalHerdName / @AnimalName</h6>
    <span class="oi oi-plus" aria-hidden="true" data-toggle="modal" data-target="#animalModalForm"></span>
</nav>

@if (currentMale == null || breedDTOs == null)
{
    <img src="images/dog-alone.gif" class="rounded mx-auto d-block img-fluid" />
}
else
{
    <nav>
        <div class="nav nav-tabs nav-fill" id="nav-tab" role="tablist">
            <a class="nav-item nav-link active" id="nav-profile-tab" data-toggle="tab" href="#nav-profile" role="tab" aria-controls="nav-profile" aria-selected="true">Profil</a>
            <a class="nav-item nav-link" id="nav-weightings-tab" data-toggle="tab" href="#nav-weightings" role="tab" aria-controls="nav-contact" aria-selected="false">Pesées</a>
            <a class="nav-item nav-link" id="nav-characteristic-tab" data-toggle="tab" href="#nav-characteristic" role="tab" aria-controls="nav-characteristic" aria-selected="false">Caracteristiques</a>
            <a class="nav-item nav-link" id="nav-alimentation-tab" data-toggle="tab" href="#nav-alimentation" role="tab" aria-controls="nav-alimentation" aria-selected="false">Alimentation</a>
        </div>
    </nav>
    <div class="tab-content mt-5" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">

            <div class="row">
                <div class="col-3">
                    @{
                        var imageUrl = string.Empty;
                        if (currentMale.Picture != null && currentMale.Picture.Length > 0)
                        {
                            imageUrl = $"data:image/png;base64,{Convert.ToBase64String(currentMale.Picture)}";
                        }
                    }
                    <img src=@imageUrl alt="profilePicture" class="img-thumbnail">
                </div>
                <EditForm Model="@currentMale" OnValidSubmit="SaveAnimalAsync" class="col-9">
                    <DataAnnotationsValidator />
                    <div class="form-group row">
                        <label for="name" class="col-3 col-form-label">
                            Nom
                        </label>
                        <div class="col-sm-9">
                            <InputText id="name" class="form-control hm-width" placeholder="Nom du troupeau" @bind-Value="currentMale.Name" disabled=@isNoEditable />
                            <ValidationMessage For="@(() => currentMale.Name)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="specie" class="col-3 col-form-label">
                            Race
                        </label>
                        <div class="col-9">
                            <InputSelect id="breed" @bind-Value="currentMale.Breed.Id" disabled class="form-control hm-width">
                                @foreach (var breed in breedDTOs)
                                {
                                    <option value="@breed.Id">@breed.Label</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="number" class="col-3 col-form-label">
                            Numero
                        </label>
                        <div class="col-sm-9">
                            <InputNumber id="number" class="form-control hm-width" placeholder="numero de l'animal" @bind-Value="currentMale.Number" disabled=@isNoEditable />
                            <ValidationMessage For="@(() => currentMale.Number)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="birthDate" class="col-3 col-form-label">
                            Date de naissance
                        </label>
                        <div class="col-sm-9">
                            <InputDate id="birthDate" class="form-control hm-width" placeholder="Date de naissance" @bind-Value="currentMale.BirthDate" disabled=@isNoEditable />
                            <ValidationMessage For="@(() => currentMale.BirthDate)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label for="origin" class="col-3 col-form-label">
                            Origines
                        </label>
                        <div class="col-9">
                            <InputSelect id="origin" @bind-Value="@currentMale.Origin" class="form-control hm-width" disabled=@isNoEditable>
                                @foreach (var origin in Helper.GetKeyValuesAsListFromEnum(typeof(AnimalOrigin)))
                                {
                                    <option value="@origin.Key">@origin.Value</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => currentMale.Origin)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label for="mother" class="col-3 col-form-label">
                            Mere
                        </label>
                        <div class="col-9">
                            <InputSelect id="mother" @bind-Value="@motherId" class="form-control hm-width" placeholder="Quelles sont les origines" disabled=@isNoEditable>

                                @foreach (var female in females)
                                {
                                    <option value="@female.Id">@female.ToString()</option>
                                }
                            </InputSelect>
                            @if ((int)motherId > 0)
                            {
                                <i class="fas fa-eye text-primary" style="cursor: pointer;"
                                   @onclick="@(() => navigationManager.NavigateTo(females.Where(f => f.Id == motherId).FirstOrDefault()?.GetProfilePageUrl(AnimalHerdName), forceLoad:true))">
                                    Details
                                </i>
                            }

                            @if (@canNotBeMother)
                            {
                                <div class="validation-message">L'animal sélectionné ne peut pas être la mère de "@currentMale.Name"</div>
                            }
                        </div>
                    </div>

                    <div class="form-group row">
                        <label for="father" class="col-3 col-form-label">
                            Pere
                        </label>
                        <div class="col-9">
                            <InputSelect id="father" @bind-Value="@fatherId" class="form-control hm-width" disabled=@isNoEditable>
                                @foreach (var male in males)
                                {
                                    <option value="@male.Id">@male.ToString()</option>
                                }
                            </InputSelect>

                            @if ((int)fatherId > 0)
                            {
                                <i class="fas fa-eye text-primary" style="cursor: pointer;"
                                   @onclick="@(() => navigationManager.NavigateTo(@males.Where(m => m.Id == fatherId).FirstOrDefault()?.GetProfilePageUrl(AnimalHerdName), forceLoad:true))">
                                    Details
                                </i>
                            }

                            @if (@canNotBeFather)
                            {
                                <div class="validation-message">L'animal selectionné ne peut pas être le père de "@currentMale.Name"</div>
                            }
                        </div>
                    </div>

                    @if (isNoEditable == false)
                    {
                        <div class="form-group row">
                            <label for="picture" class="col-3 col-form-label">
                                Photo
                            </label>
                            <div class="col-sm-9">
                                <div class="hm-width">
                                    <SfUploader>
                                        <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                                    </SfUploader>
                                </div>
                            </div>
                        </div>

                        
                        <button @onclick="@CleanAndMakeNoEditable" type="button" class="btn btn-secondary">Annuler</button>
                        <button @onclick="@SaveAnimalAsync" type="button" class="btn btn-success">Enregistrer</button>
                        
                    }
                    else
                    {
                        <button @onclick="@MakeEditable" type="button" class="btn btn-secondary">Modifier</button>
                    }

                </EditForm>
            </div>
        </div>
            <TabComingSoon idTab="nav-characteristic" />
            
            <TabComingSoon idTab="nav-alimentation" />
        <div class="tab-pane fade" id="nav-weightings" role="tabpanel" aria-labelledby="nav-weightings-tab">
             <Weighings AnimalId="@currentMale.Id"></Weighings>
        </div>
    </div>
}


@code {

    [Parameter]
    public int AnimalNumber { get; set; }

    [Parameter]
    public string AnimalName { get; set; }

    [Parameter]
    public string AnimalHerdName { get; set; }

    public bool isNoEditable = true;

    private List<Male> males;

    private List<Female> females;

    private int? fatherId = 0;

    private int? motherId = 0;

    private List<BreedDTO> breedDTOs;

    private Male currentMale;

    private bool canNotBeFather;

    private bool canNotBeMother;

    protected async override Task OnInitializedAsync()
    {
        currentMale = animalRepository.GetMaleByNumber(AnimalNumber);

        motherId = currentMale?.FromCalving?.FemaleId ?? motherId;

        fatherId = currentMale?.FromCalving?.MaleId ?? fatherId;

        breedDTOs = await breedRepository.GetAllBreeds().ContinueWith(breeds => breeds.Result.ToBreedDTOList().ToList());

        males = animalRepository.GetMalesByHerdId(currentMale.Herd.Id)
                                .Where(male => male.Id != currentMale.Id)
                                .ToList();

        females = animalRepository.GetFemalesByHerdId(currentMale.Herd.Id).ToList();
    }


    private async Task SaveAnimalAsync()
    {
        canNotBeMother = motherId > 0 ? !reproductionService.CanBeMotherOfAnimalBornIn(motherId.Value, currentMale.BirthDate) : false;

        canNotBeFather = fatherId > 0 ? !reproductionService.CanBeFatherOfAnimalBornIn(fatherId.Value, currentMale.BirthDate) : false;

        if (canNotBeFather || canNotBeMother)
        {
            return;
        }

        currentMale = (Male)await reproductionService.UpdateAnimalAsync(currentMale, motherId.Value, fatherId.Value);

        CleanAndMakeNoEditable();
    }

    private void MakeEditable()
    {
        isNoEditable = false;
    }

    private void CleanAndMakeNoEditable()
    {
        canNotBeMother = false;
        canNotBeFather = false;

        motherId = currentMale?.FromCalving?.FemaleId ?? 0;
        fatherId = currentMale?.FromCalving?.MaleId ?? 0;

        isNoEditable = true;
    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            currentMale.Picture = file.Stream.ToArray();
        }
    }
}