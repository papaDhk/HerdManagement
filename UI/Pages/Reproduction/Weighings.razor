@using HerdManagement.Domain.Common.Entities
@using HerdManagement.Domain.Common.Repositories
@using Action = Syncfusion.Blazor.Grids.Action
@inject IWeighingRepository _weighingRepository;
@inject IMeasurementUnitRepository _measurementUnitRepository;

@if (_weighings == null)
{
    <img src="images/dog-alone.gif" class="rounded mx-auto d-block img-fluid" />
}
else
{
    <SfGrid @ref="_weighingsDataGrid" DataSource="@_weighings" AllowSorting="true" Toolbar="@_toolbarItems">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridEvents OnActionBegin="OnBeginHandlerAsync" OnActionComplete="OnActionComplete"TValue="Weighing"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(Weighing.Id) IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
            <GridColumn Field=@nameof(Weighing.Value) HeaderText="Valeur de la pesée">
            </GridColumn>
            <GridColumn Field=@nameof(Weighing.MeasurementUnit) HeaderText="Unité">
                <Template Context="weighingContext">
                    @{
                        var weighing = (Weighing) weighingContext;
                    }
                    <span>@weighing?.MeasurementUnit?.ToString()</span>
                </Template>
                <EditTemplate Context="WeighingContext">
                    @{
                        var weighing = WeighingContext as Weighing;
                    }
                    <InputSelect id="measurementUnit" @bind-Value="@weighing.MeasurementUnitId" class="form-control">
                        @foreach (var measurementUnit in _lengthMeasurementUnits)
                        {
                            <option value="@measurementUnit.Id">@measurementUnit?.ToString()</option>
                        }
                    </InputSelect>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(Weighing.DateTime) HeaderText="Date">
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {

    [Parameter]
    public int AnimalId { get; set; }

    private List<Weighing> _weighings;

    private List<MeasurementUnit> _lengthMeasurementUnits;

    private SfGrid<Weighing> _weighingsDataGrid;
    
    protected override async Task OnInitializedAsync()
    {
        _weighings = _weighingRepository.GetWeighingsByAnimalId(AnimalId).ToList();

        _lengthMeasurementUnits = _measurementUnitRepository.GetMeasurementUnitsByCategory(MeasurementUnitCategory.Mass)
            .ToList();
    }

    private readonly string[] _toolbarItems = {"Add","Edit","Delete"};

    private async Task OnBeginHandlerAsync(ActionEventArgs<Weighing> Args)
    {
        if (Args.RequestType == Action.Delete)
        {
            await _weighingRepository.DeleteWeighing(Args.Data.Id);
        }
        
        if (Args.Action == "Add")
        {
            Weighing newWeighing = Args.Data;
        
            newWeighing.AnimalId = AnimalId;
        
            Args.Data = await _weighingRepository.CreateOrUpdateWeighingAsync(newWeighing);
        }
        else if (Args.Action == "Edit")
        {
            Weighing weighingToUpdate = Args.Data;
            
            Args.Data = await _weighingRepository.CreateOrUpdateWeighingAsync(weighingToUpdate.ToWeighingUpdateDTO());
        }
        
    }

    //TODO On creation there is a problem
    private void OnActionComplete(ActionEventArgs<Weighing> Args) 
    { 
        if(Args.RequestType == Action.Save) 
        {
            if (Args.Action == "Edit")
            {
                Weighing updatedWeigh = Args.Data;

                int weighingToUpdateIndex = _weighings.FindIndex(weighing => weighing.Id == updatedWeigh.Id);

                _weighings[weighingToUpdateIndex] = updatedWeigh;
            }

            _weighingsDataGrid.Refresh();
        } 
    } 

}